1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
4:I[6874,["874","static/chunks/874-900774ead0b7e3c7.js","858","static/chunks/app/posts/%5Bslug%5D/page-6f336b081a9b38e4.js"],""]
6:I[9665,[],"OutletBoundary"]
9:I[9665,[],"ViewportBoundary"]
b:I[9665,[],"MetadataBoundary"]
d:I[6614,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ef06dd4fce6a6bbf.css","style"]
0:{"P":null,"b":"IyfApjxg5Q8mWpelQLKfV","p":"","c":["","posts","2023-05-24-dalle"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","2023-05-24-dalle","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ef06dd4fce6a6bbf.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_5cfdac __variable_9a8899 antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"flex flex-col items-center justify-center min-h-screen p-4","children":[["$","h1",null,{"className":"text-4xl font-serif mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl mb-6","children":"Page Not Found"}],["$","p",null,{"className":"mb-8 text-center","children":"The page you are looking for doesn't exist or has been moved."}],["$","$L4",null,{"href":"/","className":"px-6 py-3 border border-neutral-200 hover:bg-primary/10 transition-colors","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","2023-05-24-dalle","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5","$undefined",null,["$","$L6",null,{"children":["$L7","$L8",null]}]]}],{},null,false]},null,false]},null,false]},[["$","div","l",{"className":"flex items-center justify-center min-h-screen","children":["$","div",null,{"className":"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"}]}],[],[]],false],["$","$1","h",{"children":[null,["$","$1","uYaj4N3yfP7j1Jq4YPRDy",{"children":[["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$Lb",null,{"children":"$Lc"}]]}],false]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
e:T5b7,prose prose-lg max-w-none  prose-headings:font-serif prose-headings:font-semibold prose-headings:text-foreground prose-h1:text-3xl prose-h1:md:text-4xl prose-h1:mb-6 prose-h1:mt-8 prose-h2:text-2xl prose-h2:md:text-3xl prose-h2:mb-4 prose-h2:mt-8 prose-h3:text-xl prose-h3:md:text-2xl prose-h3:mb-3 prose-h3:mt-6 prose-p:text-base prose-p:md:text-lg prose-p:leading-relaxed prose-p:mb-6 prose-p:font-serif prose-p:text-muted-foreground prose-strong:font-semibold prose-strong:text-foreground prose-a:text-primary prose-a:no-underline hover:prose-a:underline prose-ul:mb-6 prose-ul:space-y-2 prose-li:text-base prose-li:md:text-lg prose-li:font-serif prose-li:text-muted-foreground prose-ol:mb-6 prose-ol:space-y-2 prose-blockquote:border-l-4 prose-blockquote:border-primary prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-muted-foreground prose-code:bg-[#fdf6e3] prose-code:text-[#657b83] prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:text-sm prose-code:font-mono prose-code:border prose-code:border-[#eee8d5] prose-pre:bg-[#fdf6e3] prose-pre:text-[#657b83] prose-pre:p-4 prose-pre:rounded-lg prose-pre:overflow-x-auto prose-pre:border prose-pre:border-[#eee8d5] prose-pre:shadow-sm prose-pre:font-mono prose-pre:text-sm prose-pre:leading-relaxed [&_.hljs]:bg-transparent [&_.hljs]:text-inherit prose-img:rounded-lg prose-img:shadow-sm prose-img:max-w-[60%] prose-img:mx-auto [&_img]:max-w-[60%] [&_img]:mx-auto [&_img]:blockf:T4bd9,<p><img src="/images/posts/dalle_files/firstdisplay.png" alt="png"></p>
<p>I wanted to explore the DALL-E 2 diffusion model API along with combinatorial generation algorithms and visualization techniques to create a semi-random collage of latent space manipulations of American Gothic. This experiment involved leveraging both the DALL-E 2 image synthesis capabilities and the GPT-3 language model for style prompt generation, creating a multi-stage generative pipeline. The implementation demonstrates inpainting techniques through masked image editing, where specific spatial regions are reconstructed based on textual conditioning. While developing this computational approach, I utilized ChatGPT for matplotlib visualization assistance, adding a recursive layer of generative model interaction to the creative process. Next, I plan to explore the Whisper automatic speech recognition model from OpenAI.</p>

<h3>Import Necessary Libaries and Define a Few Helper Functions</h3>
<pre><code class="hljs language-python"><span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> openai
<span class="hljs-keyword">import</span> itertools
<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> uuid
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
openai.api_key =  os.environ[<span class="hljs-string">"OPENAI_API_KEY"</span>]
openai.Model.<span class="hljs-built_in">list</span>()
<span class="hljs-comment"># Functions</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">ask_gpt</span>(<span class="hljs-params">prompt</span>):
    response = openai.Completion.create(
        engine=<span class="hljs-string">"text-davinci-003"</span>,  <span class="hljs-comment"># use the latest model available to you</span>
        prompt=prompt,
        max_tokens=<span class="hljs-number">200</span>, 
    )
    output_text_parsed = response.choices[<span class="hljs-number">0</span>].text.strip()
    <span class="hljs-built_in">print</span>(output_text_parsed)
    <span class="hljs-keyword">return</span> response
<span class="hljs-comment"># make a uniqueish string to label images as they are generated</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_uniqueish_string</span>():
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(uuid.uuid4())[:<span class="hljs-number">8</span>]

<span class="hljs-keyword">def</span> <span class="hljs-title function_">process_dalle_images</span>(<span class="hljs-params">response, filename, image_dir, i, <span class="hljs-built_in">hash</span> = <span class="hljs-literal">True</span></span>):
    <span class="hljs-comment"># save the images</span>
    uid = generate_uniqueish_string()
    urls = [datum[<span class="hljs-string">"url"</span>] <span class="hljs-keyword">for</span> datum <span class="hljs-keyword">in</span> response[<span class="hljs-string">"data"</span>]]  <span class="hljs-comment"># extract URLs</span>
    images = [requests.get(url).content <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls]  <span class="hljs-comment"># download images</span>
    image_names = [<span class="hljs-string">f"<span class="hljs-subst">{filename}</span>_<span class="hljs-subst">{i + <span class="hljs-number">1</span>}</span>_<span class="hljs-subst">{uid}</span>.png"</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(images))]  <span class="hljs-comment"># create names</span>
    filepaths = [os.path.join(image_dir, name) <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> image_names]  <span class="hljs-comment"># create filepaths</span>
    <span class="hljs-keyword">for</span> image, filepath <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(images, filepaths):  <span class="hljs-comment"># loop through the variations</span>
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> image_file:  <span class="hljs-comment"># open the file</span>
            image_file.write(image)  <span class="hljs-comment"># write the image to the file</span>

    <span class="hljs-keyword">return</span> filepaths
<span class="hljs-comment"># set a directory to save DALLÂ·E images to</span>
image_dir_name = <span class="hljs-string">"images"</span>
image_dir = os.path.join(os.curdir, image_dir_name)

<span class="hljs-comment"># create the directory if it doesn't yet exist</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(image_dir):
    os.mkdir(image_dir)

<span class="hljs-comment"># print the directory to save to</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">f"<span class="hljs-subst">{image_dir=}</span>"</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">top_half_mask</span>(<span class="hljs-params">width, height, mask_dir, mask_name</span>):
    mask = Image.new(<span class="hljs-string">"RGBA"</span>, (width, height), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))
    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):
        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height // <span class="hljs-number">2</span>):
            mask.putpixel((x, y), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))
    mask_filepath = os.path.join(mask_dir, mask_name)
    mask.save(mask_filepath)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">bottom_half_mask</span>(<span class="hljs-params">width, height, mask_dir, mask_name</span>):
    mask = Image.new(<span class="hljs-string">"RGBA"</span>, (width, height), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))
    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):
        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height // <span class="hljs-number">2</span>, height):
            mask.putpixel((x, y), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))
    mask_filepath = os.path.join(mask_dir, mask_name)
    mask.save(mask_filepath)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">left_half_mask</span>(<span class="hljs-params">width, height, mask_dir, mask_name</span>):
    mask = Image.new(<span class="hljs-string">"RGBA"</span>, (width, height), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))
    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width // <span class="hljs-number">2</span>):
        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):
            mask.putpixel((x, y), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))
    mask_filepath = os.path.join(mask_dir, mask_name)
    mask.save(mask_filepath)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">right_half_mask</span>(<span class="hljs-params">width, height, mask_dir, mask_name</span>):
    mask = Image.new(<span class="hljs-string">"RGBA"</span>, (width, height), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))
    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width // <span class="hljs-number">2</span>, width):
        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):
            mask.putpixel((x, y), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))
    mask_filepath = os.path.join(mask_dir, mask_name)
    mask.save(mask_filepath)

</code></pre>
<pre><code>image_dir='./images'
</code></pre>
<h3>Show Image we are working with</h3>
<pre><code class="hljs language-python">american_gothic = <span class="hljs-string">"images/American_Gothic_Square.png"</span>
im = Image.<span class="hljs-built_in">open</span>(american_gothic)
display(im)
</code></pre>
<p><img src="/images/posts/dalle_files/dalle_3_0.png" alt="png"></p>
<h3>Leverage Large Language Models for Style Prompt Generation</h3>
<pre><code class="hljs language-python"><span class="hljs-comment"># Prompt engineering for art style enumeration via autoregressive language modeling</span>
question = <span class="hljs-string">"provide a python list of 15 distinct art styles (i.e. impressionist, cubist, pointlist, photorealistic, japanese wood block print)"</span>
<span class="hljs-comment"># Join the description and question into a single string</span>
prompt = <span class="hljs-string">f"<span class="hljs-subst">{question}</span>"</span>
gpt_output = ask_gpt(prompt)
<span class="hljs-comment"># Parse the output</span>
art_styles_string = gpt_output.choices[<span class="hljs-number">0</span>][<span class="hljs-string">'text'</span>]
art_styles = [line.split(<span class="hljs-string">'. '</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> art_styles_string.split(<span class="hljs-string">'\n'</span>) <span class="hljs-keyword">if</span> line]
<span class="hljs-comment"># choose the length of combinations you want, for example 2</span>
length_of_combinations = <span class="hljs-number">2</span>
style_combinations = <span class="hljs-built_in">list</span>(itertools.combinations(art_styles, length_of_combinations))
</code></pre>
<pre><code>1. Impressionism 
2. Cubism 
3. Pointillism 
4. Photorealism 
5. Japanese Wood Block Print 
6. Expressionism 
7. Constructivism 
8. Abstract Expressionism 
9. Surrealism 
10. Baroque 
11. Realism 
12. Neo-Impressionism 
13. Art Deco 
14. Cubo-Futurism 
15. Op Art
</code></pre>
<pre><code class="hljs language-python"><span class="hljs-comment"># Format the GPT output for Dalle prompt</span>
formatted_strings = []

<span class="hljs-keyword">for</span> combination <span class="hljs-keyword">in</span> style_combinations:
    style_1, style_2 = combination
    formatted_string = <span class="hljs-string">f"in the style of <span class="hljs-subst">{style_1}</span> and <span class="hljs-subst">{style_2}</span>"</span>
    formatted_strings.append(formatted_string)
<span class="hljs-comment"># TODO would be better to print at random from the list to actually show</span>
<span class="hljs-keyword">for</span> string <span class="hljs-keyword">in</span> formatted_strings[:<span class="hljs-number">10</span>]:
    <span class="hljs-built_in">print</span>(string)

</code></pre>
<pre><code>in the style of Impressionism  and Cubism .
in the style of Impressionism  and Pointillism .
in the style of Pointillism  and Surrealism .
in the style of Cubism  and Baroque .
</code></pre>
<h3>Create Masks</h3>
<pre><code class="hljs language-python">mask_dir = <span class="hljs-string">"images/masks"</span>
<span class="hljs-comment"># create the directory if it doesn't yet exist</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(mask_dir):
    os.mkdir(mask_dir)
<span class="hljs-comment"># print the directory to save to</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">f"<span class="hljs-subst">{mask_dir=}</span>"</span>)

<span class="hljs-comment"># TODO ask what are the actual image sizes </span>
width = <span class="hljs-number">574</span>
height = <span class="hljs-number">574</span>

mask_dir = <span class="hljs-string">"./masks"</span>
os.makedirs(mask_dir, exist_ok=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># ensure the directory exists</span>
top_half_mask(width, height, mask_dir, <span class="hljs-string">"top_half_mask.png"</span>)
bottom_half_mask(width, height, mask_dir, <span class="hljs-string">"bottom_half_mask.png"</span>)
left_half_mask(width, height, mask_dir, <span class="hljs-string">"left_half_mask.png"</span>)
right_half_mask(width, height, mask_dir, <span class="hljs-string">"right_half_mask.png"</span>)

<span class="hljs-comment"># specify edit images dir</span>
edit_image_dir = os.path.join(<span class="hljs-string">"images"</span>, <span class="hljs-string">"edits"</span>)
</code></pre>
<pre><code>mask_dir='images/masks'
</code></pre>
<pre><code class="hljs language-python">os.makedirs(<span class="hljs-string">f"<span class="hljs-subst">{edit_image_dir}</span>"</span>, exist_ok=<span class="hljs-literal">True</span>)
</code></pre>
<h3>Execute DALL-E 2 Inpainting with Stochastic Mask Selection and Style Conditioning</h3>
<pre><code class="hljs language-python"><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> implement metadata embedding for tracking conditioning parameters in generated samples</span>

<span class="hljs-comment"># Specify the directory</span>
mask_dir = <span class="hljs-string">"./masks/"</span>
num_iterations = <span class="hljs-number">4</span>  <span class="hljs-comment"># specify the number of iterations</span>

<span class="hljs-comment"># Get the list of all masks in the directory</span>
masks = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(mask_dir) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">'.png'</span>)]

<span class="hljs-comment"># Iterate for the number of specified iterations</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):
    <span class="hljs-comment"># Select a random mask</span>
    selected_mask = random.choice(masks)
    <span class="hljs-comment"># Get the full file path of the selected mask</span>
    mask_filepath = os.path.join(mask_dir, selected_mask)

    <span class="hljs-comment"># Select a random style combination</span>
    selected_prompt = random.choice(formatted_strings)

    <span class="hljs-comment"># Execute conditional image generation via masked inpainting</span>
    edit_response = openai.Image.create_edit(
        image=<span class="hljs-built_in">open</span>(american_gothic, <span class="hljs-string">"rb"</span>),  <span class="hljs-comment"># source image for conditioning</span>
        mask=<span class="hljs-built_in">open</span>(mask_filepath, <span class="hljs-string">"rb"</span>),  <span class="hljs-comment"># spatial mask for inpainting region</span>
        prompt=selected_prompt,  <span class="hljs-comment"># textual conditioning for style transfer</span>
        n=<span class="hljs-number">1</span>,  <span class="hljs-comment"># number of samples from posterior distribution</span>
        size=<span class="hljs-string">"512x512"</span>,  <span class="hljs-comment"># output resolution</span>
        response_format=<span class="hljs-string">"url"</span>,
    )
    
    <span class="hljs-comment"># print response for prototype / debug</span>
    <span class="hljs-comment"># print(edit_response)</span>
    edit_filepaths = process_dalle_images(edit_response, <span class="hljs-string">"edits"</span>, edit_image_dir, i, <span class="hljs-built_in">hash</span> = <span class="hljs-literal">True</span>)

</code></pre>
<h3>Visualization of Generated Sample Distribution via Grid Assembly</h3>
<pre><code class="hljs language-python"><span class="hljs-comment"># Specify the directory</span>
image_directory = <span class="hljs-string">"images/edits/"</span>
image_files = [f <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> os.listdir(image_directory) <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">'.png'</span>)]
<span class="hljs-comment"># shuffle image file order to get different images in the plot</span>
image_files = np.random.permutation(image_files)
<span class="hljs-comment"># Load all the images</span>
images = [Image.<span class="hljs-built_in">open</span>(image_directory + f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> image_files]
<span class="hljs-comment"># Ensure sufficient samples for statistical visualization through repetition</span>
<span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(images) &#x3C; <span class="hljs-number">100</span>:
    images *= <span class="hljs-number">2</span>

<span class="hljs-comment"># Only take the first 100 images</span>
images = images[:<span class="hljs-number">100</span>]

<span class="hljs-comment"># Create a 10x10 visualization grid for sample distribution analysis</span>
fig, axes = plt.subplots(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, figsize=(<span class="hljs-number">18</span>, <span class="hljs-number">18</span>))

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):
        <span class="hljs-comment"># Get the image</span>
        img = images[i * <span class="hljs-number">10</span> + j]

        <span class="hljs-comment"># Remove the axes for each subplot</span>
        axes[i, j].axis(<span class="hljs-string">'off'</span>)

        <span class="hljs-comment"># Display the image on the subplot</span>
        axes[i, j].imshow(np.array(img), aspect=<span class="hljs-string">'auto'</span>)

<span class="hljs-comment"># Adjust the space between the subplots</span>
<span class="hljs-comment"># Negative values for wspace and hspace will make the images overlap</span>
plt.subplots_adjust(wspace=-<span class="hljs-number">0.05</span>, hspace=-<span class="hljs-number">0.05</span>)

<span class="hljs-comment"># Show the plot</span>
plt.show()
</code></pre>
<p><img src="/images/posts/dalle_files/dalle_13_0.png" alt="png"></p>5:["$","div",null,{"className":"min-h-screen bg-background","children":["$","div",null,{"className":"max-w-4xl mx-auto px-6 py-12","children":[["$","$L4",null,{"href":"/#posts","className":"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground mb-8 transition-colors","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left","aria-hidden":"true","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to posts"]}],["$","header",null,{"className":"mb-8","children":[["$","div",null,{"className":"mb-4","children":[["$","div",null,{"className":"text-sm uppercase text-muted-foreground mb-2","children":"computer-vision"}],["$","h1",null,{"className":"text-4xl md:text-5xl font-serif font-bold leading-tight","children":"DALL-E and a Combinatoric Collage: Generative Image Models"}]]}],["$","div",null,{"className":"text-muted-foreground","children":"May 26, 2023"}],["$","div",null,{"className":"flex flex-wrap gap-2 mt-4","children":[["$","span","DALL-E",{"className":"px-2 py-1 text-xs bg-secondary text-secondary-foreground rounded","children":"DALL-E"}],["$","span","generative-AI",{"className":"px-2 py-1 text-xs bg-secondary text-secondary-foreground rounded","children":"generative-AI"}]]}]]}],["$","article",null,{"className":"$e","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}]}],["$","footer",null,{"className":"mt-12 pt-8 border-t","children":["$","$L4",null,{"href":"/#posts","className":"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":16,"height":16,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left","aria-hidden":"true","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to all posts"]}]}]]}]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
8:null
c:[["$","title","0",{"children":"DALL-E and a Combinatoric Collage: Generative Image Models | Michael Swift"}],["$","meta","1",{"name":"description","content":"<p><img src=\"/images/posts/dalle_files/firstdisplay.png\" alt=\"png\"></p>\n<p>I wanted to explore the DALL-E 2 diffusion model API along with combinatorial generat..."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
